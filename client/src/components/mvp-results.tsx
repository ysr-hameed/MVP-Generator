import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  CheckCircle, 
  Code, 
  DollarSign, 
  Calendar, 
  TrendingUp,
  Target,
  Download,
  Share2
} from "lucide-react";

interface MvpPlan {
  coreFeatures: string[];
  techStack: {
    frontend: string;
    backend: string;
    database: string;
    payment?: string;
    hosting?: string;
  };
  monetizationStrategy: string;
  howItWorks?: string;
  competitiveAdvantage?: string;
  whyItWorks?: string;
  marketOpportunity?: string;
  timeline: {
    mvp: string;
    launch: string;
    growth: string;
  };
  estimatedCost: {
    development: string;
    monthly: string;
  };
  marketAnalysis: {
    targetMarket: string;
    competition: string;
    opportunity: string;
  };
  nextSteps: string[];
}

interface MvpResultsProps {
  mvpPlan: MvpPlan;
}

export function MvpResults({ mvpPlan }: MvpResultsProps) {
  const downloadAsPDF = () => {
    // Create a professional PDF-ready formatted content
    const content = generateFormattedContent();
    const element = document.createElement('a');
    const file = new Blob([content], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = 'mvp-plan.txt';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const downloadAsImage = () => {
    // Create an image version by rendering to canvas
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    canvas.width = 800;
    canvas.height = 1200;
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Add content to canvas
    ctx.fillStyle = '#1a1a1a';
    ctx.font = 'bold 24px Arial';
    ctx.fillText('MVP PLAN', 50, 50);
    
    let y = 100;
    ctx.font = '16px Arial';
    const lines = generateFormattedContent().split('\n');
    lines.slice(0, 40).forEach((line) => { // Limit lines to fit
      ctx.fillText(line.substring(0, 80), 50, y);
      y += 25;
    });

    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'mvp-plan.png';
        a.click();
        URL.revokeObjectURL(url);
      }
    });
  };

  const downloadAsReadme = () => {
    const readmeContent = `# MVP Development Plan

## 📋 Project Overview

This comprehensive MVP plan was generated to help guide your startup development process.

## 🚀 Core Features

${mvpPlan.coreFeatures.map(feature => `- ${feature}`).join('\n')}

## 💻 Technology Stack

- **Frontend:** ${mvpPlan.techStack.frontend}
- **Backend:** ${mvpPlan.techStack.backend}
- **Database:** ${mvpPlan.techStack.database}
${mvpPlan.techStack.payment ? `- **Payment:** ${mvpPlan.techStack.payment}` : ''}
${mvpPlan.techStack.hosting ? `- **Hosting:** ${mvpPlan.techStack.hosting}` : ''}

## 💰 Monetization Strategy

${mvpPlan.monetizationStrategy}

## ⏱️ Development Timeline

- **MVP Development:** ${mvpPlan.timeline.mvp}
- **Market Launch:** ${mvpPlan.timeline.launch}
- **Growth Phase:** ${mvpPlan.timeline.growth}

## 💵 Cost Estimation

- **Development Cost:** ${mvpPlan.estimatedCost.development}
- **Monthly Operations:** ${mvpPlan.estimatedCost.monthly}

## 🎯 Market Analysis

### Target Market
${mvpPlan.marketAnalysis.targetMarket}

### Competition
${mvpPlan.marketAnalysis.competition}

### Market Opportunity
${mvpPlan.marketAnalysis.opportunity}

## 📝 Next Steps

${mvpPlan.nextSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}

---

*Generated by MVP Generator AI - Your partner in startup success*
`;

    const element = document.createElement('a');
    const file = new Blob([readmeContent], { type: 'text/markdown' });
    element.href = URL.createObjectURL(file);
    element.download = 'README.md';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const generateFormattedContent = () => {
    return `
MVP DEVELOPMENT PLAN
====================

EXECUTIVE SUMMARY
-----------------
This comprehensive MVP plan provides a detailed roadmap for your startup development, including technical specifications, market analysis, and actionable next steps.

CORE FEATURES
-------------
${mvpPlan.coreFeatures.map(feature => `• ${feature}`).join('\n')}

TECHNOLOGY STACK
----------------
• Frontend: ${mvpPlan.techStack.frontend}
• Backend: ${mvpPlan.techStack.backend}
• Database: ${mvpPlan.techStack.database}
${mvpPlan.techStack.payment ? `• Payment: ${mvpPlan.techStack.payment}` : ''}
${mvpPlan.techStack.hosting ? `• Hosting: ${mvpPlan.techStack.hosting}` : ''}

MONETIZATION STRATEGY
--------------------
${mvpPlan.monetizationStrategy}

DEVELOPMENT TIMELINE
-------------------
• MVP Development: ${mvpPlan.timeline.mvp}
• Market Launch: ${mvpPlan.timeline.launch}
• Growth Phase: ${mvpPlan.timeline.growth}

COST BREAKDOWN
--------------
• Development Investment: ${mvpPlan.estimatedCost.development}
• Monthly Operations: ${mvpPlan.estimatedCost.monthly}

MARKET ANALYSIS
---------------
Target Market: ${mvpPlan.marketAnalysis.targetMarket}

Competition: ${mvpPlan.marketAnalysis.competition}

Market Opportunity: ${mvpPlan.marketAnalysis.opportunity}

ACTION PLAN
-----------
${mvpPlan.nextSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}

Generated by MVP Generator AI
Date: ${new Date().toLocaleDateString()}
`;
  };

  const handleExport = () => {
    const content = generateFormattedContent();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'mvp-plan.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My MVP Plan',
          text: 'Check out my AI-generated MVP plan!',
          url: window.location.href,
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback to copying URL
      navigator.clipboard.writeText(window.location.href);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-2xl font-bold">Your MVP Plan</h3>
        <div className="flex flex-wrap gap-2">
          <Button onClick={downloadAsPDF} variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            Download TXT
          </Button>
          <Button onClick={downloadAsImage} variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            Download Image
          </Button>
          <Button onClick={downloadAsReadme} variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            Download README.md
          </Button>
          <Button onClick={handleShare} variant="outline" size="sm">
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </Button>
        </div>
      </div>
      
      <div className="grid md:grid-cols-2 gap-6">
        {/* Core Features */}
        <Card className="feature-card">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <CheckCircle className="w-5 h-5 mr-2 text-primary" />
              Core Features
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              {mvpPlan.coreFeatures.map((feature, index) => (
                <li key={index} className="flex items-start">
                  <Badge variant="outline" className="mr-2 mt-0.5 text-xs">
                    {index + 1}
                  </Badge>
                  <span className="text-sm">{feature}</span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
        
        {/* Tech Stack */}
        <Card className="feature-card">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <Code className="w-5 h-5 mr-2 text-primary" />
              Tech Stack
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div>
                <span className="font-medium text-sm">Frontend:</span>
                <Badge className="ml-2">{mvpPlan.techStack.frontend}</Badge>
              </div>
              <div>
                <span className="font-medium text-sm">Backend:</span>
                <Badge className="ml-2">{mvpPlan.techStack.backend}</Badge>
              </div>
              <div>
                <span className="font-medium text-sm">Database:</span>
                <Badge className="ml-2">{mvpPlan.techStack.database}</Badge>
              </div>
              {mvpPlan.techStack.payment && (
                <div>
                  <span className="font-medium text-sm">Payment:</span>
                  <Badge className="ml-2">{mvpPlan.techStack.payment}</Badge>
                </div>
              )}
              {mvpPlan.techStack.hosting && (
                <div>
                  <span className="font-medium text-sm">Hosting:</span>
                  <Badge className="ml-2">{mvpPlan.techStack.hosting}</Badge>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Monetization Strategy */}
      <Card className="feature-card">
        <CardHeader>
          <CardTitle className="flex items-center text-lg">
            <DollarSign className="w-5 h-5 mr-2 text-primary" />
            Monetization Strategy
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm leading-relaxed">{mvpPlan.monetizationStrategy}</p>
        </CardContent>
      </Card>

      <div className="grid md:grid-cols-2 gap-6">
        {/* Timeline */}
        <Card className="feature-card">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <Calendar className="w-5 h-5 mr-2 text-primary" />
              Development Timeline
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm font-medium">MVP Development:</span>
                <Badge variant="outline">{mvpPlan.timeline.mvp}</Badge>
              </div>
              <div className="flex justify-between">
                <span className="text-sm font-medium">Market Launch:</span>
                <Badge variant="outline">{mvpPlan.timeline.launch}</Badge>
              </div>
              <div className="flex justify-between">
                <span className="text-sm font-medium">Growth Phase:</span>
                <Badge variant="outline">{mvpPlan.timeline.growth}</Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Estimated Costs */}
        <Card className="feature-card">
          <CardHeader>
            <CardTitle className="flex items-center text-lg">
              <TrendingUp className="w-5 h-5 mr-2 text-primary" />
              Estimated Costs
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm font-medium">Development:</span>
                <Badge className="gradient-secondary text-white">
                  {mvpPlan.estimatedCost.development}
                </Badge>
              </div>
              <div className="flex justify-between">
                <span className="text-sm font-medium">Monthly Operations:</span>
                <Badge className="gradient-secondary text-white">
                  {mvpPlan.estimatedCost.monthly}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Market Analysis */}
      <Card className="feature-card">
        <CardHeader>
          <CardTitle className="flex items-center text-lg">
            <Target className="w-5 h-5 mr-2 text-primary" />
            Market Analysis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h4 className="font-medium text-sm mb-2">Target Market:</h4>
              <p className="text-sm text-muted-foreground">{mvpPlan.marketAnalysis.targetMarket}</p>
            </div>
            <div>
              <h4 className="font-medium text-sm mb-2">Competition:</h4>
              <p className="text-sm text-muted-foreground">{mvpPlan.marketAnalysis.competition}</p>
            </div>
            <div>
              <h4 className="font-medium text-sm mb-2">Market Opportunity:</h4>
              <p className="text-sm text-muted-foreground">{mvpPlan.marketAnalysis.opportunity}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Next Steps */}
      <Card className="feature-card">
        <CardHeader>
          <CardTitle className="flex items-center text-lg">
            <CheckCircle className="w-5 h-5 mr-2 text-primary" />
            Next Steps
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {mvpPlan.nextSteps.map((step, index) => (
              <div key={index} className="flex items-start">
                <Badge variant="outline" className="mr-2 mt-0.5 text-xs">
                  {index + 1}
                </Badge>
                <span className="text-sm">{step}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
